"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGraphQLParameters = void 0;
function setValue(obj, path, value) {
    const a = path.split(".");
    let o = obj;
    while (a.length - 1) {
        const n = a.shift();
        if (!(n in o))
            o[n] = {};
        o = o[n];
    }
    o[a[0]] = value;
}
async function getGraphQLParameters(request) {
    var _a, _b;
    const url = new URL(request.url);
    let operationName;
    let query;
    let variables;
    switch (request.method) {
        case "GET": {
            operationName = url.searchParams.get("operationName") || undefined;
            query = url.searchParams.get("query") || undefined;
            variables = url.searchParams.get("variables") || undefined;
            break;
        }
        case "POST": {
            const contentType = request.headers.get("content-type") || "application/json";
            if (contentType.startsWith("multipart/form-data")) {
                const requestBody = await request.formData();
                const operationsStr = ((_a = requestBody.get("operations")) === null || _a === void 0 ? void 0 : _a.toString()) || "{}";
                const operations = JSON.parse(operationsStr);
                const mapStr = ((_b = requestBody.get("map")) === null || _b === void 0 ? void 0 : _b.toString()) || "{}";
                const map = JSON.parse(mapStr);
                for (const fileIndex in map) {
                    const file = requestBody.get(fileIndex);
                    const [path] = map[fileIndex];
                    setValue(operations, path, file);
                }
                operationName = operations.operationName;
                query = operations.query;
                variables = operations.variables;
            }
            else {
                const requestBody = await request.json();
                operationName = requestBody === null || requestBody === void 0 ? void 0 : requestBody.operationName;
                query = requestBody === null || requestBody === void 0 ? void 0 : requestBody.query;
                variables = requestBody === null || requestBody === void 0 ? void 0 : requestBody.variables;
            }
            break;
        }
    }
    return {
        operationName,
        query,
        variables,
    };
}
exports.getGraphQLParameters = getGraphQLParameters;
