import { ExecutionResult } from "graphql";
import { ExecutionPatchResult } from "../types";
export declare type TransformResultFn = (result: ExecutionResult | ExecutionPatchResult) => any;
export declare const DEFAULT_TRANSFORM_RESULT_FN: TransformResultFn;
export declare function getRegularResponse(executionResult: ExecutionResult, transformResult?: TransformResultFn): Response;
export declare function getMultipartResponse(asyncExecutionResult: AsyncIterable<ExecutionPatchResult<any>>, transformResult?: TransformResultFn): Response;
export declare function getPushResponse(asyncExecutionResult: AsyncIterable<ExecutionResult<any>>, transformResult?: TransformResultFn): Response;
interface ErrorResponseParams {
    message: string;
    status?: number;
    headers?: any;
    errors?: Error[];
    transformResult?: typeof DEFAULT_TRANSFORM_RESULT_FN;
    isEventStream: boolean;
}
export declare function getErrorResponse({ message, status, headers, errors, transformResult, isEventStream, }: ErrorResponseParams): Response;
export {};
