import { handleRequest } from '@graphql-yoga/handler';
export { renderGraphiQL } from '@graphql-yoga/handler';
import { envelop, useSchema, enableIf, useLogger, useMaskedErrors, useExtendContext } from '@envelop/core';
import { useDisableIntrospection } from '@envelop/disable-introspection';
import { useValidationCache } from '@envelop/validation-cache';
import { useParserCache } from '@envelop/parser-cache';
import { makeExecutableSchema } from '@graphql-tools/schema';

const DEFAULT_CORS_OPTIONS = {
    origin: ['*'],
    methods: ['GET', 'HEAD', 'PUT', 'PATCH', 'POST', 'DELETE'],
    optionsSuccessStatus: 204,
};
/**
 * Base class that can be extended to create a GraphQL server with any HTTP server framework.
 * @internal
 */
class Server {
    constructor(options) {
        var _a;
        /**
         * Request handler for helix
         */
        this.handleRequest = handleRequest;
        this.schema =
            'schema' in options
                ? options.schema
                : makeExecutableSchema({
                    typeDefs: options.typeDefs,
                    resolvers: options.resolvers,
                });
        this.logger = options.enableLogging
            ? options.logger || console
            : {
                debug: () => { },
                error: () => { },
                warn: () => { },
                info: () => { },
            };
        const maskedErrors = options.maskedErrors || false;
        const introspectionEnabled = (_a = options.introspection) !== null && _a !== void 0 ? _a : true;
        this.getEnveloped = envelop({
            plugins: [
                // Use the schema provided by the user
                useSchema(this.schema),
                // Performance things
                useParserCache({
                    errorCache: new Map(),
                    documentCache: new Map(),
                }),
                useValidationCache({
                    cache: new Map(),
                }),
                // Log events - useful for debugging purposes
                enableIf(!!options.enableLogging, useLogger({
                    logFn: (eventName, events) => {
                        var _a, _b, _c, _d, _e;
                        if (eventName === 'execute-start') {
                            const context = events.args.contextValue;
                            const query = (_b = (_a = context.request) === null || _a === void 0 ? void 0 : _a.body) === null || _b === void 0 ? void 0 : _b.query;
                            const variables = (_d = (_c = context.request) === null || _c === void 0 ? void 0 : _c.body) === null || _d === void 0 ? void 0 : _d.variables;
                            const headers = (_e = context.request) === null || _e === void 0 ? void 0 : _e.headers;
                            this.logger.debug(eventName);
                            this.logger.debug(query, 'query');
                            // there can be no variables
                            if (variables && Object.keys(variables).length > 0) {
                                this.logger.debug(variables, 'variables');
                            }
                            this.logger.debug(headers, 'headers');
                        }
                        if (eventName === 'execute-end') {
                            this.logger.debug(eventName);
                            this.logger.debug(events.result, 'response');
                        }
                    },
                })),
                enableIf(!introspectionEnabled, useDisableIntrospection()),
                enableIf(!!maskedErrors, useMaskedErrors(typeof maskedErrors === 'object' ? maskedErrors : undefined)),
                ...(options.context != null
                    ? [
                        useExtendContext(typeof options.context === 'function'
                            ? options.context
                            : () => options.context),
                    ]
                    : []),
                ...(options.plugins || []),
            ],
        });
        if (options.cors != null) {
            if (typeof options.cors === 'function') {
                const userProvidedCorsOptionsFactory = options.cors;
                this.corsOptionsFactory = (...args) => {
                    const corsOptions = userProvidedCorsOptionsFactory(...args);
                    return {
                        ...DEFAULT_CORS_OPTIONS,
                        ...corsOptions,
                    };
                };
            }
            else if (typeof options.cors === 'object') {
                const corsOptions = {
                    ...DEFAULT_CORS_OPTIONS,
                    ...options.cors,
                };
                this.corsOptionsFactory = () => corsOptions;
            }
            else if (typeof options.cors === 'boolean') {
                this.corsOptionsFactory = () => DEFAULT_CORS_OPTIONS;
            }
        }
        if (typeof options.graphiql === 'object' || options.graphiql === false) {
            this.graphiql = options.graphiql;
        }
        else {
            this.graphiql = introspectionEnabled ? {} : false;
        }
    }
}
function createServer(options) {
    return new Server(options);
}

export { Server, createServer };
