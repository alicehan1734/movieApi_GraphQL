'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const repeater = require('@repeaterjs/repeater');

const resolveGlobalConfig = (api = globalThis) => {
    if (!api.Event || !api.EventTarget) {
        throw new Error(`
[@graphql-yoga/subscription] 'createPubSub' uses the Event and EventTarget APIs.

In modern JavaScript environments those are part of the global scope. However, if you are using an older version of Node.js (<= 16.x.x), those APIs must be polyfilled.
You can provide polyfills to the 'createPubSub' function:

\`\`\`
// yarn install @ungap/event @ungap/event-target
import Event from '@ungap/event'
import EventTarget from '@ungap/event-target'

const pubSub = createPubSub({
event: {
    Event,
    EventTarget,
}
})
\`\`\`
`);
    }
    return globalThis;
};
/**
 * Utility for publishing and subscribing to events.
 */
const createPubSub = (config) => {
    var _a;
    const { Event, EventTarget } = resolveGlobalConfig(config === null || config === void 0 ? void 0 : config.event);
    const target = (_a = config === null || config === void 0 ? void 0 : config.eventTarget) !== null && _a !== void 0 ? _a : new EventTarget();
    return {
        publish(routingKey, ...args) {
            const event = new Event(routingKey);
            event.data = args[0];
            target.dispatchEvent(event);
        },
        subscribe(...[routingKey, id]) {
            const topic = id === undefined ? routingKey : `${routingKey}:${id}`;
            return new repeater.Repeater(function subscriptionRepeater(next, stop) {
                stop.then(function subscriptionRepeaterStopHandler() {
                    target.removeEventListener(topic, pubsubEventListener);
                });
                target.addEventListener(topic, pubsubEventListener);
                function pubsubEventListener(event) {
                    next(event.data);
                }
            });
        },
    };
};

/**
 * Utility for mapping an event stream.
 */
const map = (mapper) => (source) => new repeater.Repeater(async (push, stop) => {
    stop.then(() => {
        source.return();
    });
    for await (const value of source) {
        push(await mapper(value));
    }
});

function filter(filter) {
    return (source) => new repeater.Repeater(async (push, stop) => {
        stop.then(() => {
            source.return();
        });
        for await (const value of source) {
            if (filter(value)) {
                push(value);
            }
        }
    });
}

exports.createPubSub = createPubSub;
exports.filter = filter;
exports.map = map;
